#include<stdio.h>
#include<stdlib.h>

struct node
{
  int data;
  struct node* left;
  struct node* right;
};

struct stack
{
    int top;
    struct node* array[20];
};

struct stack s,s2;

int empty(struct stack* stack)
{
    if(stack->top==-1)
    {
        return 1;
    }

        return 0;
}


int push(struct stack* stack,struct node* temp)
{
    if(stack->top<20)
    {
        stack->top++;
        stack->array[stack->top]=temp;
    }
}

struct node* pop(struct stack* stack)
{
  if(stack->top >= 0)
  {
    struct node* temp = stack->array[stack->top--];
    return temp;
  }
  return NULL;

}

void create(struct node** root)
{
    char dir;
    int flag=0;
    struct node* temp;
    struct node* newnode=(struct node*)malloc(sizeof(struct node));
    printf("Enter the data to be added: ");
    scanf("%d",&newnode->data);
    newnode->left=NULL;
    newnode->right=NULL;

    if(*root==NULL)
    {
        *root=newnode;
        printf("Root node is added\n");
    }
    else
    {
        temp=*root;
        while(flag==0)
        {
            printf("Where to add node(l/r) of %d \n",temp->data);
            scanf(" %c",&dir);
            if(dir=='l')
            {
                if(temp->left==NULL)
                {
                    temp->left=newnode;
                    printf("Node %d is added to the left of %d\n",newnode->data ,temp->data);
                    flag=1;
                    break;
                }
                else
                {
                    temp=temp->left;
                }
            }
            else if(dir=='r')
            {
                if(temp->right==NULL)
                {
                    temp->right=newnode;
                    printf("Node %d is added to the right of %d\n",newnode->data,temp->data);
                    flag=1;
                    break;
                }
                else
                {
                    temp=temp->right;
                }
            }
            else
            {
                printf("Enter valid input\n");
                break;
            }
        }
    }

}

void preorder(struct node* root)
{
    struct node* temp=root;
    push(&s,root);
    while(!empty(&s))
    {
        temp=pop(&s);
        if(temp!=NULL)
        {
            printf("%d ",temp->data);
            push(&s,temp->right);
            push(&s,temp->left);
        }
    }
}

void inorder(struct node* root)
{
    struct node* temp=root;
    while(!empty(&s)|| temp!=NULL)
    {
        if(temp!=NULL)
        {
            push(&s,temp);
            temp=temp->left;
        }
        else
        {
            temp=pop(&s);
            printf("%d ",temp->data);
            temp=temp->right;
        }
    }
}

void postorder(struct node* root)
{
    if(root==NULL)
    {
        return;
    }

    push(&s,root);
    struct node* temp;
    while(!empty(&s))
    {
        temp=pop(&s);
        push(&s2,temp);

        if(temp->left!=NULL)
            push(&s,temp->left);
        if(temp->right!=NULL)
            push(&s,temp->right);
    }

    while(!empty(&s2))
    {
        temp=pop(&s2);
        printf("%d ",temp->data);
    }
}


int main()
{
    struct node* root=NULL;
    int ch;
    char c;
    s.top=-1;
    s2.top=-1;
    while(1)
    {
        printf("Enter the choice");
        scanf("%d",&ch);

        switch(ch)
        {
        case 1:
            {
                do
                {
                    create(&root);
                    printf("Do you want to continue adding the nodes(y/n):-");
                    scanf(" %c",&c);
                }while(c=='y');
                break;
            }

        case 2:
            {
                preorder(root);
                break;
            }

        case 3:
            {
                inorder(root);
                break;
            }

        case 4:
            {
                postorder(root);
                break;
            }
        case 5:
            {
            exit(0);
            break;
            }
    }
}
}
