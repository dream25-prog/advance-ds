//Kruskal using adj matrix
#include <stdio.h>
#include <stdlib.h>


#define MAX_NODES 100
#define MAX_EDGES 100


typedef struct {
    int src, dest, weight;
} Edge;


int adjMatrix[MAX_NODES][MAX_NODES];
int numNodes;


int find(int parent[], int i) {
    if (parent[i] == -1) {
        return i;
    }
    return find(parent, parent[i]);
}


void unionSet(int parent[], int x, int y) {
    int xset = find(parent, x);
    int yset = find(parent, y);
    parent[xset] = yset;
}


void kruskalMST() {
    Edge result[MAX_NODES];
    int parent[MAX_NODES];
    int i, j, k = 0;
    for (i = 0; i < numNodes; i++) {
        parent[i] = -1;
    }
    Edge edges[MAX_EDGES];
    for (i = 0; i < numNodes; i++) {
        for (j = i+1; j < numNodes; j++) {
            if (adjMatrix[i][j] != 0) {
                edges[k].src = i;
                edges[k].dest = j;
                edges[k].weight = adjMatrix[i][j];
                k++;
            }
        }
    }
    int numEdges = k;
    
    for (i = 0; i < numEdges-1; i++) {
        for (j = i+1; j < numEdges; j++) {
            if (edges[i].weight > edges[j].weight) {
                Edge temp = edges[i];
                edges[i] = edges[j];
                edges[j] = temp;
            }
        }
    }
    
    for (i = 0; i < numEdges; i++) {
        int x = find(parent, edges[i].src);
        int y = find(parent, edges[i].dest);
        if (x != y) {
            result[k++] = edges[i];
            unionSet(parent, x, y);
        }
    }
    
    printf("MST using Kruskal's Algorithm:\n");
    for (i = 0; i < k; i++) {
        printf("%d - %d\n", result[i].src, result[i].dest);
    }
}


int main() {
    int i, j;
    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);
    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < numNodes; i++) {
        for (j = 0; j < numNodes; j++) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }
    kruskalMST();
    return 0;
}
