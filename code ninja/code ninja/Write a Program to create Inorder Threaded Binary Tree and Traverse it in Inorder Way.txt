#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
    int isThreaded;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    newNode->isThreaded = 0;
    return newNode;
}

void createThreadedBST(struct Node* root, struct Node** prev) {
    if (root) {
        createThreadedBST(root->left, prev);
        if (*prev && (*prev)->right == NULL) {
            (*prev)->right = root;
            (*prev)->isThreaded = 1;
        }
        *prev = root;
        createThreadedBST(root->right, prev);
    }
}

void inOrderTraversal(struct Node* root) {
    struct Node* current = leftMost(root);

    while (current != NULL) {
        printf("%d ", current->data);
        if (current->isThreaded) {
            current = current->right;
        } else {
            current = leftMost(current->right);
        }
    }
}

struct Node* leftMost(struct Node* node) {
    while (node != NULL && node->left != NULL) {
        node = node->left;
    }
    return node;
}

int main() {
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    struct Node* prev = NULL;
    createThreadedBST(root, &prev);

    printf("Inorder Traversal: ");
    inOrderTraversal(root);

    return 0;
}
