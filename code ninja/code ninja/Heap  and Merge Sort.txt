//Heap and merge sort
//WAP to implement Heap sort and Merge Sort on 1D array of
//Student structure (contains student_name, student_roll_no,
//total_marks), with key as student_roll_no. And count the number
//of swap performed




#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    char student_name[50];
    int student_roll_no;
    int total_marks;
};

// Function declarations
void heapify(struct Student arr[], int n, int i, int *swapCount);
void heapSort(struct Student arr[], int n, int *swapCount);
void merge(struct Student arr[], int l, int m, int r, int *swapCount);
void mergeSort(struct Student arr[], int l, int r, int *swapCount);

int main() {
    int n;

    // Input the number of students
    printf("Enter the number of students: ");
    scanf("%d", &n);

    // Allocate memory for an array of Student structures
    struct Student *students = (struct Student *)malloc(n * sizeof(struct Student));

    // Input student details
    printf("Enter student details:\n");
    for (int i = 0; i < n; ++i) {
        printf("Student %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", students[i].student_name);
        printf("Roll No: ");
        scanf("%d", &students[i].student_roll_no);
        printf("Total Marks: ");
        scanf("%d", &students[i].total_marks);
    }

    // Copy the array for both sorting algorithms to maintain the original order
    struct Student *studentsHeapSort = (struct Student *)malloc(n * sizeof(struct Student));
    struct Student *studentsMergeSort = (struct Student *)malloc(n * sizeof(struct Student));
    for (int i = 0; i < n; ++i) {
        studentsHeapSort[i] = students[i];
        studentsMergeSort[i] = students[i];
    }

    // Perform Heap Sort
    int heapSortSwapCount = 0;
    heapSort(studentsHeapSort, n, &heapSortSwapCount);

    // Perform Merge Sort
    int mergeSortSwapCount = 0;
    mergeSort(studentsMergeSort, 0, n - 1, &mergeSortSwapCount);

    // Display sorted arrays
    printf("\nHeap Sort Result:\n");
    for (int i = 0; i < n; ++i) {
        printf("%s %d %d\n", studentsHeapSort[i].student_name, studentsHeapSort[i].student_roll_no, studentsHeapSort[i].total_marks);
    }
    printf("Number of swaps in Heap Sort: %d\n", heapSortSwapCount);

    printf("\nMerge Sort Result:\n");
    for (int i = 0; i < n; ++i) {
        printf("%s %d %d\n", studentsMergeSort[i].student_name, studentsMergeSort[i].student_roll_no, studentsMergeSort[i].total_marks);
    }
    printf("Number of swaps in Merge Sort: %d\n", mergeSortSwapCount);

    // Free allocated memory
    free(students);
    free(studentsHeapSort);
    free(studentsMergeSort);

    return 0;
}

void heapify(struct Student arr[], int n, int i, int *swapCount) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left].student_roll_no > arr[largest].student_roll_no)
        largest = left;

    if (right < n && arr[right].student_roll_no > arr[largest].student_roll_no)
        largest = right;

    if (largest != i) {
        // Swap elements
        struct Student temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;

        (*swapCount)++;
        heapify(arr, n, largest, swapCount);
    }
}

void heapSort(struct Student arr[], int n, int *swapCount) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i, swapCount);
    }

    // Extract elements from the heap one by one
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        struct Student temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        (*swapCount)++;
        // Call heapify on the reduced heap
        heapify(arr, i, 0, swapCount);
    }
}

void merge(struct Student arr[], int l, int m, int r, int *swapCount) {
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temporary arrays
    struct Student L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temporary arrays back into arr[l..r]
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i].student_roll_no <= R[j].student_roll_no) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        (*swapCount)++;
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
        (*swapCount)++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
        (*swapCount)++;
    }
}

void mergeSort(struct Student arr[], int l, int r, int *swapCount) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and r
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m, swapCount);
        mergeSort(arr, m + 1, r, swapCount);

        // Merge the sorted halves
        merge(arr, l, m, r, swapCount);
    }
}




