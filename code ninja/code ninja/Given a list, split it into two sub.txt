//Given a list, split it into two sublists â€” one for the
front half, and one for the back half. If the number of
elements is odd, the extra element should go in the front

list. So FrontBackSplit() on the list {2, 3, 5, 7, 11} should
yield the two lists {2, 3, 5} and {7, 11}. Getting this right for
all the cases is harder than it looks. You should check
your solution against a few cases (length = 2, length = 3,
length=4) to make sure that the list gets split correctly
near the short-list boundary conditions. If it works right
for length=4, it probably works right for length=1000. You
will probably need special case code to deal with the
(length &lt;2) cases.


#include <stdio.h>
#include <stdlib.h>

// Node structure for a linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    return head;
}

// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Function to split a list into front and back halves
void FrontBackSplit(struct Node* source, struct Node** frontRef, struct Node** backRef) {
    if (source == NULL || source->next == NULL) {
        *frontRef = source;
        *backRef = NULL;
        return;
    }

    struct Node* slow = source;
    struct Node* fast = source->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    *frontRef = source;
    *backRef = slow->next;
    slow->next = NULL;
}

int main() {
    // Create a linked list
    struct Node* myList = NULL;
    myList = insertAtEnd(myList, 2);
    myList = insertAtEnd(myList, 3);
    myList = insertAtEnd(myList, 5);
    myList = insertAtEnd(myList, 7);
    myList = insertAtEnd(myList, 11);

    // Print the original list
    printf("Original List: ");
    printList(myList);

    // Split the list into front and back halves
    struct Node* frontHalf = NULL;
    struct Node* backHalf = NULL;
    FrontBackSplit(myList, &frontHalf, &backHalf);

    // Print the front and back halves
    printf("Front Half: ");
    printList(frontHalf);

    printf("Back Half: ");
    printList(backHalf);

    // Free memory
    free(myList);  // Assuming freeList function to free memory

    return 0;
}
