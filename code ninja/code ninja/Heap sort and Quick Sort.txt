//Heap sort and Quick Sort
//WAP to implement Heap sort and Quick Sort on 1D array of
//Student structure (contains student_name, student_roll_no,
//total_marks), with key as student_roll_no. And count the number
//of swap performed.


#include <stdio.h>
#include <stdlib.h>

struct Student {
    char student_name[50];
    int student_roll_no;
    int total_marks;
};

// Function declarations
void heapify(struct Student arr[], int n, int i, int *swapCount);
void heapSort(struct Student arr[], int n, int *swapCount);
int partition(struct Student arr[], int low, int high, int *swapCount);
void quickSort(struct Student arr[], int low, int high, int *swapCount);

int main() {
    int n;

    // Input the number of students
    printf("Enter the number of students: ");
    scanf("%d", &n);

    // Allocate memory for an array of Student structures
    struct Student *students = (struct Student *)malloc(n * sizeof(struct Student));

    // Input student details
    printf("Enter student details:\n");
    for (int i = 0; i < n; ++i) {
        printf("Student %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", students[i].student_name);
        printf("Roll No: ");
        scanf("%d", &students[i].student_roll_no);
        printf("Total Marks: ");
        scanf("%d", &students[i].total_marks);
    }

    // Copy the array for both sorting algorithms to maintain the original order
    struct Student *studentsHeapSort = (struct Student *)malloc(n * sizeof(struct Student));
    struct Student *studentsQuickSort = (struct Student *)malloc(n * sizeof(struct Student));
    for (int i = 0; i < n; ++i) {
        studentsHeapSort[i] = students[i];
        studentsQuickSort[i] = students[i];
    }

    // Perform Heap Sort
    int heapSortSwapCount = 0;
    heapSort(studentsHeapSort, n, &heapSortSwapCount);

    // Perform Quick Sort
    int quickSortSwapCount = 0;
    quickSort(studentsQuickSort, 0, n - 1, &quickSortSwapCount);

    // Display sorted arrays
    printf("\nHeap Sort Result:\n");
    for (int i = 0; i < n; ++i) {
        printf("%s %d %d\n", studentsHeapSort[i].student_name, studentsHeapSort[i].student_roll_no, studentsHeapSort[i].total_marks);
    }
    printf("Number of swaps in Heap Sort: %d\n", heapSortSwapCount);

    printf("\nQuick Sort Result:\n");
    for (int i = 0; i < n; ++i) {
        printf("%s %d %d\n", studentsQuickSort[i].student_name, studentsQuickSort[i].student_roll_no, studentsQuickSort[i].total_marks);
    }
    printf("Number of swaps in Quick Sort: %d\n", quickSortSwapCount);

    // Free allocated memory
    free(students);
    free(studentsHeapSort);
    free(studentsQuickSort);

    return 0;
}

void heapify(struct Student arr[], int n, int i, int *swapCount) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left].student_roll_no > arr[largest].student_roll_no)
        largest = left;

    if (right < n && arr[right].student_roll_no > arr[largest].student_roll_no)
        largest = right;

    if (largest != i) {
        // Swap elements
        struct Student temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;

        (*swapCount)++;
        heapify(arr, n, largest, swapCount);
    }
}

void heapSort(struct Student arr[], int n, int *swapCount) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i, swapCount);
    }

    // Extract elements from the heap one by one
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        struct Student temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        (*swapCount)++;
        // Call heapify on the reduced heap
        heapify(arr, i, 0, swapCount);
    }
}

int partition(struct Student arr[], int low, int high, int *swapCount) {
    struct Student pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j].student_roll_no < pivot.student_roll_no) {
            i++;
            // Swap elements
            struct Student temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;

            (*swapCount)++;
        }
    }

    // Swap pivot with the element at (i + 1)
    struct Student temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    (*swapCount)++;
    return i + 1;
}

void quickSort(struct Student arr[], int low, int high, int *swapCount) {
    if (low < high) {
        // Find pivot element such that elements smaller than pivot are on the left, and greater on the right
        int pi = partition(arr, low, high, swapCount);

        // Recursively sort sub-arrays
        quickSort(arr, low, pi - 1, swapCount);
        quickSort(arr, pi + 1, high, swapCount);
    }
}





