//Adj matrix BFS and DFS
#include <stdio.h>
#include <stdlib.h>


#define MAX_NODES 100


int adjMatrix[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];


void bfs(int start, int n) {
    int queue[MAX_NODES], front = 0, rear = 0;
    int i, curr;
    
    // Enqueue the start node and mark it as visited
    queue[rear++] = start;
    visited[start] = 1;
    
    while (front != rear) {
        // Dequeue the next node in the queue
        curr = queue[front++];
        printf("%d ", curr);
        
        // Add all unvisited neighbors to the queue
        for (i = 0; i < n; i++) {
            if (adjMatrix[curr][i] && !visited[i]) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }
    }
}


void dfs(int start, int n) {
    int stack[MAX_NODES], top = -1;
    int i, curr;
    
    // Push the start node onto the stack and mark it as visited
    stack[++top] = start;
    visited[start] = 1;
    
    while (top != -1) {
        // Pop the next node off the stack
        curr = stack[top--];
        printf("%d ", curr);
        
        // Push all unvisited neighbors onto the stack
        for (i = n - 1; i >= 0; i--) {
            if (adjMatrix[curr][i] && !visited[i]) {
                stack[++top] = i;
                visited[i] = 1;
            }
        }
    }
}


int main() {
    int n, i, j, start;
    
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    
    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }
    
    printf("Enter the starting node: ");
    scanf("%d", &start);
    
    printf("BFS traversal: ");
    bfs(start, n);
    printf("\n");
    
    for (i = 0; i < n; i++) {
        visited[i] = 0;
    }
    
    printf("DFS traversal: ");
    dfs(start, n);
    printf("\n");
    
    return 0;
}


